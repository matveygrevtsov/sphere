{"version":3,"sources":["images/text.png","components/Animation/Animator.ts","components/Animation/Animation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","radius","cardSize","rotationSpeed","color","mouseSensitivity","Animator","props","containerHtmlElement","scene","camera","renderer","textureLoader","group","texture","requestAnimation","animate","render","window","innerWidth","incrementRotation","requestAnimationFrame","this","THREE","add","clientWidth","clientHeight","position","z","setSize","innerHeight","shadowMap","enabled","ambientLight","pointLight","x","y","addEventListener","resize","event","handleMouseMove","rotateGroup","clear","addObjectsToScene","gui","dat","min","max","step","name","onChange","refreshScene","addColor","width","height","aspect","updateProjectionMatrix","setPixelRatio","Math","devicePixelRatio","subSphereNumber","floor","subSphereIndex","subSphereRadius","circlesNumber","PI","asin","circleIndex","cos","circleRadius","sqrt","itemsNumber","itemIndex","addCubeToScene","sizeX","sizeY","sizeZ","positionX","positionY","positionZ","sin","rotation","random","geometry","material","push","map","cube","undefined","castShadow","load","image","appendChild","domElement","initDebugUi","cancelAnimationFrame","containerHtmlElementId","Animation","useEffect","document","getElementById","animator","start","destroy","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.8125b52a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/text.1e24f840.png\";","import * as THREE from 'three'\nimport * as dat from 'dat.gui'\nimport image from '../../images/text.png'\n\nconst mediaBreakPoint = 1024\n\nconst config = {\n  radius: 4.5,\n  cardSize: 1,\n  rotationSpeed: 1,\n  color: '#6101AF',\n  mouseSensitivity: 1,\n}\n\ninterface CubeProps {\n  sizeX: number\n  sizeY: number\n  sizeZ: number\n  positionX: number\n  positionY: number\n  positionZ: number\n  rotation: number | undefined\n}\n\ninterface AnimatorProps {\n  containerHtmlElement: HTMLElement\n}\n\nexport class Animator {\n  private readonly containerHtmlElement: HTMLElement\n  private readonly scene: THREE.Scene\n  private readonly camera: THREE.PerspectiveCamera\n  private readonly renderer: THREE.WebGLRenderer\n  private readonly textureLoader: THREE.TextureLoader\n  private readonly group: THREE.Group\n  private texture: THREE.Texture | undefined\n  private requestAnimation: number\n\n  constructor(props: AnimatorProps) {\n    this.containerHtmlElement = props.containerHtmlElement\n\n    // Объявляем сцену\n    this.scene = new THREE.Scene()\n    this.scene.add(new THREE.AmbientLight(0xffffff, 0.9))\n\n    // Объявляем камеру\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      this.containerHtmlElement.clientWidth /\n        this.containerHtmlElement.clientHeight,\n      0.1,\n      1000,\n    )\n    this.camera.position.z = 10\n\n    // Объявляем renderer\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n    this.renderer.shadowMap.enabled = true\n\n    // Объявляем группу\n    this.group = new THREE.Group()\n    this.scene.add(this.group)\n\n    this.requestAnimation = 0\n\n    // Объявляем свет\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5)\n    this.scene.add(ambientLight)\n    const pointLight = new THREE.PointLight(0xffffff, 0.5)\n    pointLight.position.x = 2\n    pointLight.position.y = 3\n    pointLight.position.z = 4\n    this.scene.add(pointLight)\n\n    // Объявляем TextureLoader\n    this.textureLoader = new THREE.TextureLoader()\n\n    window.addEventListener('resize', () => this.resize())\n    window.addEventListener('mousemove', (event) => this.handleMouseMove(event))\n  }\n\n  private handleMouseMove(event: MouseEvent) {\n    if (window.innerWidth < mediaBreakPoint) {\n      return undefined\n    }\n    this.rotateGroup(\n      (event.y - this.containerHtmlElement.clientHeight / 2) *\n        config.mouseSensitivity,\n      (event.x - this.containerHtmlElement.clientWidth / 2) *\n        config.mouseSensitivity,\n    )\n  }\n\n  private refreshScene() {\n    this.group.clear()\n    this.addObjectsToScene()\n  }\n\n  private initDebugUi() {\n    const gui = new dat.GUI()\n    gui\n      .add(config, 'radius')\n      .min(1)\n      .max(7)\n      .step(0.01)\n      .name('Radius')\n      .onChange(() => this.refreshScene())\n\n    gui\n      .add(config, 'cardSize')\n      .min(0.7)\n      .max(5)\n      .step(0.01)\n      .name('cardSize')\n      .onChange(() => this.refreshScene())\n\n    gui\n      .add(config, 'mouseSensitivity')\n      .min(0.01)\n      .max(2)\n      .step(0.01)\n      .name('mouseSensitivity')\n\n    gui\n      .add(config, 'rotationSpeed')\n      .min(1)\n      .max(10)\n      .step(0.001)\n      .name('mobileRotation')\n\n    gui.addColor(config, 'color').onChange(() => this.refreshScene())\n  }\n\n  private resize() {\n    const width = this.containerHtmlElement.clientWidth\n    const height = this.containerHtmlElement.clientHeight\n\n    // Update camera\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n\n    // Update renderer\n    this.renderer.setSize(width, height)\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n  }\n\n  private addObjectsToScene() {\n    // Количество субсфер\n    const subSphereNumber =\n      1 + Math.floor((config.radius - config.cardSize / 2) / config.cardSize)\n    for (\n      let subSphereIndex = 0;\n      subSphereIndex < subSphereNumber;\n      subSphereIndex++\n    ) {\n      const subSphereRadius = (subSphereIndex + 0.5) * config.cardSize\n\n      if (config.cardSize > 2 * subSphereRadius) {\n        continue\n      }\n\n      // Количество окружностей на субсфере\n      const circlesNumber = Math.floor(\n        Math.PI / (2 * Math.asin(config.cardSize / (2 * subSphereRadius))),\n      )\n      for (let circleIndex = 0; circleIndex <= circlesNumber; circleIndex++) {\n        const y =\n          subSphereRadius * Math.cos((Math.PI / circlesNumber) * circleIndex)\n\n        const circleRadius = Math.sqrt(\n          Math.max(subSphereRadius * subSphereRadius - y * y, 0),\n        )\n\n        // Количество объектов, которые уместятся на окружности\n        const itemsNumber =\n          config.cardSize > 2 * circleRadius\n            ? 1\n            : Math.floor(\n                Math.PI / Math.asin(config.cardSize / (2 * circleRadius)),\n              )\n\n        for (let itemIndex = 0; itemIndex < itemsNumber; itemIndex++) {\n          this.addCubeToScene({\n            sizeX: config.cardSize / Math.sqrt(2),\n            sizeY: config.cardSize / Math.sqrt(2),\n            sizeZ: config.cardSize / Math.sqrt(2) / 20,\n            positionX:\n              circleRadius * Math.cos((2 * Math.PI * itemIndex) / itemsNumber),\n            positionY: y,\n            positionZ:\n              circleRadius * Math.sin((2 * Math.PI * itemIndex) / itemsNumber),\n            rotation: itemIndex + Math.random(),\n          })\n        }\n      }\n    }\n  }\n\n  private addCubeToScene({\n    sizeX,\n    sizeY,\n    sizeZ,\n    positionX,\n    positionY,\n    positionZ,\n    rotation,\n  }: CubeProps) {\n    const geometry = new THREE.BoxGeometry(sizeX, sizeY, sizeZ)\n    const material = []\n\n    material.push(new THREE.MeshLambertMaterial({ color: config.color }))\n    material.push(new THREE.MeshLambertMaterial({ color: config.color }))\n    material.push(new THREE.MeshLambertMaterial({ color: config.color }))\n    material.push(new THREE.MeshLambertMaterial({ color: config.color }))\n    material.push(\n      new THREE.MeshLambertMaterial({\n        color: config.color,\n        map: this.texture,\n      }),\n    )\n    material.push(\n      new THREE.MeshLambertMaterial({\n        color: config.color,\n        map: this.texture,\n      }),\n    )\n\n    const cube = new THREE.Mesh(geometry, material)\n    cube.position.x = positionX\n    cube.position.y = positionY\n    cube.position.z = positionZ\n    if (rotation !== undefined) {\n      cube.rotation.x = rotation\n      cube.rotation.y = rotation\n    }\n    cube.castShadow = true\n    this.group.add(cube)\n  }\n\n  private incrementRotation() {\n    this.group.rotation.x += config.rotationSpeed / 1000\n    this.group.rotation.y += config.rotationSpeed / 1000\n  }\n\n  private rotateGroup(x: number, y: number) {\n    this.group.rotation.x = x / 1000\n    this.group.rotation.y = y / 1000\n  }\n\n  private animate = (): void => {\n    this.renderer.render(this.scene, this.camera)\n    if (window.innerWidth < mediaBreakPoint) {\n      this.incrementRotation()\n    }\n    this.requestAnimation = requestAnimationFrame(this.animate)\n  }\n\n  public start() {\n    this.textureLoader.load(image, (texture) => {\n      this.texture = texture\n      this.containerHtmlElement.appendChild(this.renderer.domElement)\n      this.addObjectsToScene()\n      this.initDebugUi()\n      this.requestAnimation = requestAnimationFrame(this.animate)\n    })\n  }\n\n  public destroy() {\n    cancelAnimationFrame(this.requestAnimation)\n  }\n}\n","import React, { useEffect } from 'react'\nimport { Animator } from './Animator'\n\nconst containerHtmlElementId = 'animationContainer'\n\nexport const Animation = () => {\n  useEffect(() => {\n    const containerHtmlElement = document.getElementById(containerHtmlElementId)\n    if (!containerHtmlElement) {\n      return undefined\n    }\n    const animator = new Animator({ containerHtmlElement })\n    animator.start()\n    return () => animator.destroy()\n  }, [])\n\n  return <div id={containerHtmlElementId} />\n}\n","import React from 'react'\nimport { Animation } from '../src/components/Animation/Animation'\n\nfunction App() {\n  return <Animation />\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}